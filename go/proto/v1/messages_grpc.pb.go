// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: v1/messages.proto

package messagesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Harbinger_Ping_FullMethodName              = "/harbinger.go.proto.v1.Harbinger/Ping"
	Harbinger_SaveImplant_FullMethodName       = "/harbinger.go.proto.v1.Harbinger/SaveImplant"
	Harbinger_SaveProxy_FullMethodName         = "/harbinger.go.proto.v1.Harbinger/SaveProxy"
	Harbinger_SaveFile_FullMethodName          = "/harbinger.go.proto.v1.Harbinger/SaveFile"
	Harbinger_C2TaskStatus_FullMethodName      = "/harbinger.go.proto.v1.Harbinger/C2TaskStatus"
	Harbinger_GetSettings_FullMethodName       = "/harbinger.go.proto.v1.Harbinger/GetSettings"
	Harbinger_SaveTask_FullMethodName          = "/harbinger.go.proto.v1.Harbinger/SaveTask"
	Harbinger_SaveTaskOutput_FullMethodName    = "/harbinger.go.proto.v1.Harbinger/SaveTaskOutput"
	Harbinger_CheckFileExists_FullMethodName   = "/harbinger.go.proto.v1.Harbinger/CheckFileExists"
	Harbinger_UploadFile_FullMethodName        = "/harbinger.go.proto.v1.Harbinger/UploadFile"
	Harbinger_DownloadFile_FullMethodName      = "/harbinger.go.proto.v1.Harbinger/DownloadFile"
	Harbinger_SetC2ServerStatus_FullMethodName = "/harbinger.go.proto.v1.Harbinger/SetC2ServerStatus"
)

// HarbingerClient is the client API for Harbinger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HarbingerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	SaveImplant(ctx context.Context, in *ImplantRequest, opts ...grpc.CallOption) (*ImplantResponse, error)
	SaveProxy(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error)
	SaveFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	C2TaskStatus(ctx context.Context, in *C2TaskStatusRequest, opts ...grpc.CallOption) (*C2TaskStatusResponse, error)
	GetSettings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error)
	SaveTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	SaveTaskOutput(ctx context.Context, in *TaskOutputRequest, opts ...grpc.CallOption) (*TaskOutputResponse, error)
	CheckFileExists(ctx context.Context, in *FileExistsRequest, opts ...grpc.CallOption) (*FileExistsResponse, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error)
	SetC2ServerStatus(ctx context.Context, in *C2ServerStatusRequest, opts ...grpc.CallOption) (*C2ServerStatusResponse, error)
}

type harbingerClient struct {
	cc grpc.ClientConnInterface
}

func NewHarbingerClient(cc grpc.ClientConnInterface) HarbingerClient {
	return &harbingerClient{cc}
}

func (c *harbingerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Harbinger_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harbingerClient) SaveImplant(ctx context.Context, in *ImplantRequest, opts ...grpc.CallOption) (*ImplantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImplantResponse)
	err := c.cc.Invoke(ctx, Harbinger_SaveImplant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harbingerClient) SaveProxy(ctx context.Context, in *ProxyRequest, opts ...grpc.CallOption) (*ProxyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProxyResponse)
	err := c.cc.Invoke(ctx, Harbinger_SaveProxy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harbingerClient) SaveFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, Harbinger_SaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harbingerClient) C2TaskStatus(ctx context.Context, in *C2TaskStatusRequest, opts ...grpc.CallOption) (*C2TaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(C2TaskStatusResponse)
	err := c.cc.Invoke(ctx, Harbinger_C2TaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harbingerClient) GetSettings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettingsResponse)
	err := c.cc.Invoke(ctx, Harbinger_GetSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harbingerClient) SaveTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, Harbinger_SaveTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harbingerClient) SaveTaskOutput(ctx context.Context, in *TaskOutputRequest, opts ...grpc.CallOption) (*TaskOutputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskOutputResponse)
	err := c.cc.Invoke(ctx, Harbinger_SaveTaskOutput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harbingerClient) CheckFileExists(ctx context.Context, in *FileExistsRequest, opts ...grpc.CallOption) (*FileExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileExistsResponse)
	err := c.cc.Invoke(ctx, Harbinger_CheckFileExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *harbingerClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Harbinger_ServiceDesc.Streams[0], Harbinger_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadFileRequest, UploadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Harbinger_UploadFileClient = grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse]

func (c *harbingerClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Harbinger_ServiceDesc.Streams[1], Harbinger_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadFileRequest, DownloadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Harbinger_DownloadFileClient = grpc.ServerStreamingClient[DownloadFileResponse]

func (c *harbingerClient) SetC2ServerStatus(ctx context.Context, in *C2ServerStatusRequest, opts ...grpc.CallOption) (*C2ServerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(C2ServerStatusResponse)
	err := c.cc.Invoke(ctx, Harbinger_SetC2ServerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HarbingerServer is the server API for Harbinger service.
// All implementations must embed UnimplementedHarbingerServer
// for forward compatibility.
type HarbingerServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	SaveImplant(context.Context, *ImplantRequest) (*ImplantResponse, error)
	SaveProxy(context.Context, *ProxyRequest) (*ProxyResponse, error)
	SaveFile(context.Context, *FileRequest) (*FileResponse, error)
	C2TaskStatus(context.Context, *C2TaskStatusRequest) (*C2TaskStatusResponse, error)
	GetSettings(context.Context, *SettingsRequest) (*SettingsResponse, error)
	SaveTask(context.Context, *TaskRequest) (*TaskResponse, error)
	SaveTaskOutput(context.Context, *TaskOutputRequest) (*TaskOutputResponse, error)
	CheckFileExists(context.Context, *FileExistsRequest) (*FileExistsResponse, error)
	UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error
	DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error
	SetC2ServerStatus(context.Context, *C2ServerStatusRequest) (*C2ServerStatusResponse, error)
	mustEmbedUnimplementedHarbingerServer()
}

// UnimplementedHarbingerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHarbingerServer struct{}

func (UnimplementedHarbingerServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHarbingerServer) SaveImplant(context.Context, *ImplantRequest) (*ImplantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveImplant not implemented")
}
func (UnimplementedHarbingerServer) SaveProxy(context.Context, *ProxyRequest) (*ProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProxy not implemented")
}
func (UnimplementedHarbingerServer) SaveFile(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFile not implemented")
}
func (UnimplementedHarbingerServer) C2TaskStatus(context.Context, *C2TaskStatusRequest) (*C2TaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method C2TaskStatus not implemented")
}
func (UnimplementedHarbingerServer) GetSettings(context.Context, *SettingsRequest) (*SettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedHarbingerServer) SaveTask(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTask not implemented")
}
func (UnimplementedHarbingerServer) SaveTaskOutput(context.Context, *TaskOutputRequest) (*TaskOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTaskOutput not implemented")
}
func (UnimplementedHarbingerServer) CheckFileExists(context.Context, *FileExistsRequest) (*FileExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFileExists not implemented")
}
func (UnimplementedHarbingerServer) UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedHarbingerServer) DownloadFile(*DownloadFileRequest, grpc.ServerStreamingServer[DownloadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedHarbingerServer) SetC2ServerStatus(context.Context, *C2ServerStatusRequest) (*C2ServerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetC2ServerStatus not implemented")
}
func (UnimplementedHarbingerServer) mustEmbedUnimplementedHarbingerServer() {}
func (UnimplementedHarbingerServer) testEmbeddedByValue()                   {}

// UnsafeHarbingerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HarbingerServer will
// result in compilation errors.
type UnsafeHarbingerServer interface {
	mustEmbedUnimplementedHarbingerServer()
}

func RegisterHarbingerServer(s grpc.ServiceRegistrar, srv HarbingerServer) {
	// If the following call pancis, it indicates UnimplementedHarbingerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Harbinger_ServiceDesc, srv)
}

func _Harbinger_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarbingerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harbinger_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarbingerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Harbinger_SaveImplant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImplantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarbingerServer).SaveImplant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harbinger_SaveImplant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarbingerServer).SaveImplant(ctx, req.(*ImplantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Harbinger_SaveProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarbingerServer).SaveProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harbinger_SaveProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarbingerServer).SaveProxy(ctx, req.(*ProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Harbinger_SaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarbingerServer).SaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harbinger_SaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarbingerServer).SaveFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Harbinger_C2TaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2TaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarbingerServer).C2TaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harbinger_C2TaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarbingerServer).C2TaskStatus(ctx, req.(*C2TaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Harbinger_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarbingerServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harbinger_GetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarbingerServer).GetSettings(ctx, req.(*SettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Harbinger_SaveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarbingerServer).SaveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harbinger_SaveTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarbingerServer).SaveTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Harbinger_SaveTaskOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarbingerServer).SaveTaskOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harbinger_SaveTaskOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarbingerServer).SaveTaskOutput(ctx, req.(*TaskOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Harbinger_CheckFileExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarbingerServer).CheckFileExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harbinger_CheckFileExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarbingerServer).CheckFileExists(ctx, req.(*FileExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Harbinger_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HarbingerServer).UploadFile(&grpc.GenericServerStream[UploadFileRequest, UploadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Harbinger_UploadFileServer = grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]

func _Harbinger_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HarbingerServer).DownloadFile(m, &grpc.GenericServerStream[DownloadFileRequest, DownloadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Harbinger_DownloadFileServer = grpc.ServerStreamingServer[DownloadFileResponse]

func _Harbinger_SetC2ServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2ServerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HarbingerServer).SetC2ServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Harbinger_SetC2ServerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HarbingerServer).SetC2ServerStatus(ctx, req.(*C2ServerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Harbinger_ServiceDesc is the grpc.ServiceDesc for Harbinger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Harbinger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "harbinger.go.proto.v1.Harbinger",
	HandlerType: (*HarbingerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Harbinger_Ping_Handler,
		},
		{
			MethodName: "SaveImplant",
			Handler:    _Harbinger_SaveImplant_Handler,
		},
		{
			MethodName: "SaveProxy",
			Handler:    _Harbinger_SaveProxy_Handler,
		},
		{
			MethodName: "SaveFile",
			Handler:    _Harbinger_SaveFile_Handler,
		},
		{
			MethodName: "C2TaskStatus",
			Handler:    _Harbinger_C2TaskStatus_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _Harbinger_GetSettings_Handler,
		},
		{
			MethodName: "SaveTask",
			Handler:    _Harbinger_SaveTask_Handler,
		},
		{
			MethodName: "SaveTaskOutput",
			Handler:    _Harbinger_SaveTaskOutput_Handler,
		},
		{
			MethodName: "CheckFileExists",
			Handler:    _Harbinger_CheckFileExists_Handler,
		},
		{
			MethodName: "SetC2ServerStatus",
			Handler:    _Harbinger_SetC2ServerStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _Harbinger_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _Harbinger_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/messages.proto",
}
