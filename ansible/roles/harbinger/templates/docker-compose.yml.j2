services:
  postgresql:
    container_name: temporal-postgresql
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: "{{ harbinger_image_postgres }}"
    networks:
      - harbinger
    volumes:
      - /var/lib/postgresql/data
{% if harbinger_expose_all_ports %}
    ports:
      - "5432:5432
{% endif %}

  temporal:
    container_name: temporal
    restart: unless-stopped
    depends_on:
      - postgresql
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/deploy.yaml
      - LOG_LEVEL=error
    image: "{{ harbinger_image_temporal_auto_setup }}"
    networks:
      - harbinger
{% if harbinger_expose_all_ports %}
    ports:
      - 7233:7233
{% endif %}
    volumes:
      - ./deploy/dynamicconfig:/etc/temporal/config/dynamicconfig

  temporal-ui:
    container_name: temporal-ui
    restart: unless-stopped
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_UI_ENABLED=true
      - TEMPORAL_UI_PORT=8080
      - TEMPORAL_OPENAPI_ENABLED=true
    image: "{{ harbinger_image_temporal_ui }}"
    networks:
      - harbinger
{% if harbinger_expose_all_ports %}
    ports:
      - 8080:8080
{% endif %}

  postgres:
    image: "{{ harbinger_image_postgres }}"
    restart: unless-stopped
    env_file:
      - deploy/postgres.env
    volumes:
      - db-data:/var/lib/postgresql/data
{% if harbinger_expose_all_ports %}
    ports:
      - "5432:5432"
{% endif %}
    networks:
      - harbinger
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "postgres" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  redis:
    image: "{{ harbinger_image_redis }}"
    restart: unless-stopped
    command: "redis-server /etc/redis/redis.conf"
{% if harbinger_expose_all_ports %}
    ports:
      - "6379:6379"
{% endif %}
    env_file:
      - deploy/redis.env
    volumes:
      - ./deploy/redis.conf:/etc/redis/redis.conf:ro
      - redis-data:/data
    networks:
      - harbinger

  minio:
    image: "{{ harbinger_image_minio }}"
    restart: unless-stopped
    command: server /data --console-address ":9001"
{% if harbinger_expose_all_ports %}
    ports:
      - 9000:9000
      - 9001:9001
{% endif %}
    volumes:
      - minio-data:/data
    env_file:
      - deploy/minio.env
    networks:
      - harbinger

  web:
    image: "{{ harbinger_image_harbinger }}"
    restart: unless-stopped
    command: "uvicorn harbinger.config.app:app --host 0.0.0.0 --forwarded-allow-ips='*' --proxy-headers"
{% if harbinger_expose_all_ports %}
    ports:
      - "8000:8000"
{% endif %}
    env_file:
      - deploy/redis.env
      - deploy/server.env
    depends_on:
      - redis
      - minio
    networks:
      - harbinger

  grpc:
    image: "{{ harbinger_image_harbinger }}"
    restart: unless-stopped
    command: "harbinger_grpc"
{% if harbinger_expose_all_ports %}
    ports:
      - "50051:50051"
{% endif %}
    env_file:
      - deploy/redis.env
      - deploy/server.env
    depends_on:
      - redis
      - minio
    networks:
      - harbinger

  caddy:
    image: "{{ harbinger_image_caddy }}"
    restart: unless-stopped
    command: caddy reverse-proxy --from https://{{ harbinger_domain_name }}:{{ harbinger_listen_port }} --to http://web:8000
    ports:
      - {{ harbinger_listen_port }}:{{ harbinger_listen_port }}
    volumes:
      - caddy:/data
    depends_on:
      - web
    networks:
      - harbinger

  tmate:
    image: "{{ harbinger_image_tmate_ssh_server }}"
    restart: unless-stopped
{% if harbinger_expose_all_ports %}
    ports:
      - 2200:2200
{% endif %}
    volumes:
      - ./deploy/keys:/keys
    cap_add:
      - "SYS_ADMIN"
    environment:
      - SSH_HOSTNAME="{{ harbinger_domain_name | default('localhost') }}"
      - SSH_KEYS_PATH=/keys
    networks:
      - harbinger

  migration:
    image: "{{ harbinger_image_harbinger }}"
    command: harbinger_migrate
    env_file:
      - deploy/redis.env
      - deploy/server.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - harbinger

  create_defaults:
    image: "{{ harbinger_image_harbinger }}"
    command: harbinger_create_defaults
    env_file:
      - deploy/redis.env
      - deploy/server.env
    depends_on:
      migration:
        condition: service_completed_successfully
    networks:
      - harbinger

  worker:
    command: harbinger_worker
    image: "{{ harbinger_image_harbinger }}"
    env_file:
      - deploy/redis.env
      - deploy/server.env
      - deploy/tmate.env
      - deploy/proxy.env
    depends_on:
      migration:
        condition: service_completed_successfully
      temporal:
        condition: service_started
      redis:
        condition: service_started
    restart: on-failure
    networks:
      - harbinger
    deploy:
      replicas: "{{ harbinger_worker_replicas }}"

  docker_worker:
    image: "{{ harbinger_image_harbinger }}"
    command: harbinger_docker_worker
    user: root
    env_file:
      - deploy/redis.env
      - deploy/server.env
      - deploy/tmate.env
    depends_on:
      migration:
        condition: service_completed_successfully
      temporal:
        condition: service_started
      redis:
        condition: service_started
    restart: on-failure
    networks:
      - harbinger
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  events:
    image: "{{ harbinger_image_events }}"
    command: harbinger_events
    env_file:
      - deploy/redis.env
      - deploy/server.env
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_started
    restart: on-failure
    networks:
      - harbinger

volumes:
  db-data:
  minio-data:
  caddy:
  redis-data:


networks:
  harbinger:
    name: harbinger
