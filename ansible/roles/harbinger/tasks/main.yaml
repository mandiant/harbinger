# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: install apt packages
  ansible.builtin.apt:
    pkg:
    - python3-docker
    - rsync
  become: true

- name: Create installation directory
  file:
    path: "{{ installation_path }}"
    state: directory

- name: Create deploy directory
  file:
    path: "{{ installation_path }}/deploy"
    state: directory

- name: Create keys directory
  file:
    path: "{{ installation_path }}/deploy/keys"
    state: directory

- name: Create dynamicconfig directory
  file:
    path: "{{ installation_path }}/deploy/dynamicconfig"
    state: directory

- name: Generate an ed25519 key for tmate
  community.crypto.openssh_keypair:
    path: "{{ installation_path }}/deploy/keys/ssh_host_ed25519_key"
    type: ed25519
  register: ed25519_key

- name: Generate an ed25519 key for tmate
  community.crypto.openssh_keypair:
    path: "{{ installation_path }}/deploy/keys/ssh_host_rsa_key"
    type: rsa
  register: rsa_key

- name: Upload minio configuration template
  template:
    src: minio.env.j2
    dest: "{{ installation_path }}/deploy/minio.env"

- name: Upload postgres configuration template
  template:
    src: postgres.env.j2
    dest: "{{ installation_path }}/deploy/postgres.env"

- name: Upload tmate configuration template
  template:
    src: tmate.env.j2
    dest: "{{ installation_path }}/deploy/tmate.env"
  vars:
    rsa_sig: "{{ rsa_key.fingerprint }}"
    ed25519_sig: "{{ ed25519_key.fingerprint }}"

- name: Upload proxy configuration template
  template:
    src: proxy.env.j2
    dest: "{{ installation_path }}/deploy/proxy.env"

- name: Upload redis configuration template
  template:
    src: redis.conf.j2
    dest: "{{ installation_path }}/deploy/redis.conf"

- name: Upload redis configuration template
  template:
    src: redis.env.j2
    dest: "{{ installation_path }}/deploy/redis.env"

- name: Upload server configuration template
  template:
    src: server.env.j2
    dest: "{{ installation_path }}/deploy/server.env"

- name: Upload docker compose
  template:
    src: docker-compose.yml.j2
    dest: "{{ installation_path }}/docker-compose.yml"
    follow: true

- name: Upload repository
  ansible.posix.synchronize:
    src: "{{ role_path }}/../../../harbinger"
    dest: /opt/harbinger_build/

- name: Create deploy.yaml for temporal
  copy:
    src: deploy.yaml
    dest: "{{ installation_path }}/deploy/dynamicconfig/deploy.yaml"

- name: Build proxy container
  community.docker.docker_image:
    name: "harbinger_proxy:latest"
    source: build
    force_source: true
    build:
      dockerfile: "Dockerfile.proxy"
      path: /opt/harbinger_build/harbinger/
      args: "{{ harbinger_docker_build_args }}"

- name: Build harbinger container
  community.docker.docker_image:
    name: "harbinger:latest"
    source: build
    force_source: true
    build:
      dockerfile: "Dockerfile"
      path: /opt/harbinger_build/harbinger/
      args: "{{ harbinger_docker_build_args }}"

- name: Build harbinger mythic container
  community.docker.docker_image:
    name: "harbinger_mythic:latest"
    source: build
    force_source: true
    build:
      dockerfile: "Dockerfile.mythic"
      path: /opt/harbinger_build/go/
      args: "{{ harbinger_docker_build_args }}"

- name: Start harbinger
  community.docker.docker_compose_v2:
    project_src: "{{ installation_path }}"
    project_name: harbinger
    state: present

- name: Create users
  community.docker.docker_container_exec:
    container: harbinger-web-1
    argv:
    - harbinger_create_user
    - --username
    - "{{ item }}"
    - --password
    - "{{ harbinger_password }}"
  loop: "{{ harbinger_users }}"

- name: Upload and process harbinger files  
  when: harbinger_files_to_upload is defined and harbinger_files_to_upload | length > 0
  block:
    - name: Create a temporary directory for file uploads on the remote server
      ansible.builtin.tempfile:
        state: directory
        prefix: harbinger_upload_
      register: temp_upload_dir_info

    - name: Copy file to remote server
      ansible.builtin.copy:
        src: "{{ item.src_path }}"
        # Calculate filename directly here using basename filter on item.src_path
        dest: "{{ temp_upload_dir_info.path }}/{{ item.src_path | ansible.builtin.basename }}"
        mode: '0644'
      loop: "{{ harbinger_files_to_upload }}"
      loop_control:
        # label can directly access item.src_path
        label: "Copying {{ item.src_path | ansible.builtin.basename }}"
      # Removed the vars block for filename from here

    - name: Copy file into harbinger-web-1 container
      # Use docker_container_copy_into as you changed it
      community.docker.docker_container_copy_into:
        path: "{{ temp_upload_dir_info.path }}/{{ item.src_path | ansible.builtin.basename }}" # Use 'path' for the source on the remote server
        container: harbinger-web-1         # Use 'container' instead of 'container_id'
        container_path: "/tmp/{{ item.src_path | ansible.builtin.basename }}" # Use 'container_path' instead of 'dest'
      loop: "{{ harbinger_files_to_upload }}"
      loop_control:
        label: "Copying {{ item.src_path | ansible.builtin.basename }} into container"
      # Removed the vars block for filename from here

    - name: Run harbinger_files upload command
      community.docker.docker_container_exec:
        container: harbinger-web-1
        argv:
        - harbinger_files
        - upload
        - "/tmp/{{ item.src_path | ansible.builtin.basename }}" # Path inside the container
        - --filetype
        - "{{ item.filetype }}"
      loop: "{{ harbinger_files_to_upload }}"
      loop_control:
        label: "Uploading {{ item.src_path | ansible.builtin.basename }} with type {{ item.filetype }}"
      # Removed the vars block for filename from here

  always:
    - name: Clean up temporary directory on remote server
      ansible.builtin.file:
        path: "{{ temp_upload_dir_info.path }}"
        state: absent
      when: temp_upload_dir_info.path is defined
