"""Add Plan and PlanStep models

Revision ID: 81979e384557
Revises: dc0da548d27a
Create Date: 2025-08-15 09:35:06.750918

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "81979e384557"
down_revision = "dc0da548d27a"
branch_labels = None
depends_on = None


def get_trigger_statements_for_table(table_name):
    """Generates INSERT, UPDATE, DELETE trigger statements for a given table."""
    triggers = []
    # INSERT Trigger
    triggers.append(
        f"CREATE TRIGGER on_{table_name}_insert "
        f"AFTER INSERT ON {table_name} FOR EACH ROW EXECUTE FUNCTION notify_changes();",
    )
    # UPDATE Trigger
    triggers.append(
        f"CREATE TRIGGER on_{table_name}_update "
        f"AFTER UPDATE ON {table_name} FOR EACH ROW EXECUTE FUNCTION notify_changes();",
    )
    # DELETE Trigger
    triggers.append(
        f"CREATE TRIGGER on_{table_name}_delete "
        f"AFTER DELETE ON {table_name} FOR EACH ROW EXECUTE FUNCTION notify_changes();",
    )
    return triggers


def get_drop_trigger_statements_for_table(table_name):
    """Generates DROP TRIGGER statements for a given table."""
    drops = []
    drops.append(f"DROP TRIGGER IF EXISTS on_{table_name}_insert ON {table_name};")
    drops.append(f"DROP TRIGGER IF EXISTS on_{table_name}_update ON {table_name};")
    drops.append(f"DROP TRIGGER IF EXISTS on_{table_name}_delete ON {table_name};")
    return drops


TABLE_NAMES = ["plan", "plan_step"]


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "plan",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("objective", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("llm_status", sa.String(), nullable=True),
        sa.Column(
            "time_created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("time_updated", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", name="plan_name"),
    )
    op.create_table(
        "plan_step",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("plan_id", sa.UUID(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=True),
        sa.Column("llm_status", sa.String(), nullable=True),
        sa.Column("order", sa.Integer(), nullable=False),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column(
            "time_created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("time_updated", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["plan_id"],
            ["plan.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("plan_id", "order", name="plan_id_order_uc"),
    )
    op.add_column("labeled_item", sa.Column("plan_id", sa.UUID(), nullable=True))
    op.add_column("labeled_item", sa.Column("plan_step_id", sa.UUID(), nullable=True))
    op.create_foreign_key(
        "labeled_item_plan_step_fk",
        "labeled_item",
        "plan_step",
        ["plan_step_id"],
        ["id"],
    )
    op.create_foreign_key(
        "labeled_item_step_fk",
        "labeled_item",
        "plan",
        ["plan_id"],
        ["id"],
    )
    op.add_column("suggestions", sa.Column("plan_step_id", sa.UUID(), nullable=True))
    op.create_foreign_key(
        "suggestions_plan_step_fk",
        "suggestions",
        "plan_step",
        ["plan_step_id"],
        ["id"],
    )
    for table_name in TABLE_NAMES:
        trigger_sqls = get_trigger_statements_for_table(table_name)
        for sql in trigger_sqls:
            op.execute(sql)

    op.create_table(
        "llm_log",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("plan_id", sa.UUID(), nullable=False),
        sa.Column("log_type", sa.String(), nullable=False),
        sa.Column("content", sa.JSON(), nullable=False),
        sa.Column(
            "time_created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["plan_id"],
            ["plan.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )


def downgrade() -> None:
    op.drop_table("llm_log")

    for table_name in reversed(TABLE_NAMES):
        drop_trigger_sqls = get_drop_trigger_statements_for_table(table_name)
        for sql in drop_trigger_sqls:
            op.execute(sql)

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("suggestions_plan_step_fk", "suggestions", type_="foreignkey")
    op.drop_column("suggestions", "plan_step_id")
    op.drop_constraint("labeled_item_step_fk", "labeled_item", type_="foreignkey")
    op.drop_constraint("labeled_item_plan_step_fk", "labeled_item", type_="foreignkey")
    op.drop_column("labeled_item", "plan_step_id")
    op.drop_column("labeled_item", "plan_id")
    op.drop_table("plan_step")
    op.drop_table("plan")
    # ### end Alembic commands ###
