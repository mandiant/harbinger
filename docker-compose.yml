# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

services:
  postgresql:
    container_name: temporal-postgresql
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:17
    networks:
      - harbinger
    volumes:
      - temporal-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 10s
      timeout: 5s
      retries: 5

  temporal:
    container_name: temporal
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/deploy.yaml
    image: temporalio/auto-setup:1.22
    networks:
      - harbinger
    ports:
      - 7233:7233
    volumes:
      - ./deploy/dynamicconfig:/etc/temporal/config/dynamicconfig

  temporal-ui:
    container_name: temporal-ui
    restart: unless-stopped
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_UI_ENABLED=true
      - TEMPORAL_UI_PORT=8080
      - TEMPORAL_OPENAPI_ENABLED=true
    image: temporalio/ui:2.25.0
    networks:
      - harbinger
    ports:
      - 8080:8080

  postgres:
    image: postgres:17
    restart: unless-stopped
    env_file:
      - deploy/postgres.env
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - harbinger
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "postgres" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  redis:
    image: "redis:8.2"
    restart: unless-stopped
    command: "redis-server /etc/redis/redis.conf"
    ports:
      - "6379:6379"
    env_file:
      - deploy/redis.env
    networks:
      - harbinger
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: "minio/minio:RELEASE.2025-09-07T16-13-09Z"
    restart: unless-stopped
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio-data:/data
    networks:
      - harbinger
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    image: harbinger:latest
    restart: unless-stopped
    command: "uvicorn harbinger.config.app:app --host 0.0.0.0 --forwarded-allow-ips='*' --proxy-headers"
    ports:
      - "8000:8000"
    env_file:
      - deploy/redis.env
      - deploy/server.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - harbinger

  grpc:
    image: harbinger:latest
    restart: unless-stopped
    command: "harbinger_grpc"
    ports:
      - "50051:50051"
    env_file:
      - deploy/redis.env
      - deploy/server.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - harbinger

  caddy:
    image: caddy:2.4.3-alpine
    restart: unless-stopped
    command: caddy reverse-proxy --from https://*:8443 --to http://web:8000
    ports:
      - 8443:8443
    volumes:
      - caddy:/data
    depends_on:
      - web
    networks:
      - harbinger

  tmate:
    image: tmate/tmate-ssh-server:2.4.0
    restart: unless-stopped
    ports:
      - 2200:2200
    volumes:
      - ./deploy/keys:/keys
    cap_add:
      - "SYS_ADMIN"
    environment:
      - SSH_HOSTNAME=localhost
      - SSH_KEYS_PATH=/keys
    networks:
      - harbinger

  migration:
    image: harbinger:latest
    command: harbinger_migrate
    env_file:
      - deploy/redis.env
      - deploy/server.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - harbinger

  create_defaults:
    image: harbinger:latest
    command: harbinger_create_defaults
    env_file:
      - deploy/redis.env
      - deploy/server.env
    depends_on:
      migration:
        condition: service_completed_successfully
    networks:
      - harbinger

  worker:
    command: harbinger_worker
    image: harbinger:latest
    env_file:
      - deploy/redis.env
      - deploy/server.env
      - deploy/tmate.env
    depends_on:
      migration:
        condition: service_completed_successfully
      temporal:
        condition: service_started
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: on-failure
    networks:
      - harbinger

  docker_worker:
    image: harbinger:latest
    command: harbinger_docker_worker
    user: root
    env_file:
      - deploy/redis.env
      - deploy/server.env
      - deploy/tmate.env
    depends_on:
      migration:
        condition: service_completed_successfully
      temporal:
        condition: service_started
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: on-failure
    networks:
      - harbinger
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  temporal-db-data:
  db-data:
  minio-data:
  caddy:
  redis-data:


networks:
  harbinger:
    name: harbinger
